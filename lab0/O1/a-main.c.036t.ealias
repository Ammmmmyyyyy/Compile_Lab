
;; Function printf (printf, funcdef_no=15, decl_uid=964, cgraph_uid=16, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"PARM_NOALIAS(9)"[label="PARM_NOALIAS(9) = { 5 }"];
"__fmt"[label="__fmt = { 8 }"];
"__printf_chk";
"_4";
"printf";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*PARM_NOALIAS(9)";
"*__fmt";
"*__printf_chk";
"*_4";
"*printf";

  // Edges in the constraint graph:
"__fmt" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_4";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"PARM_NOALIAS(9)";
"__fmt";
"__printf_chk";
"_4";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"__fmt" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _4\l"];
"STOREDANYTHING";
"INTEGER";
"PARM_NOALIAS(9)";
"__fmt";
"__printf_chk";
"_4";
"printf";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "PARM_NOALIAS(9)";
"PARM_NOALIAS(9)" -> "ESCAPED";
"__fmt" -> "ESCAPED";
"_4" -> "ESCAPED";
"_4" -> "PARM_NOALIAS(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__fmt = { PARM_NOALIAS(9) }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }
printf = { }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.2563 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.2563 } (nonlocal, escaped, restrict)

__attribute__((artificial, gnu_inline, always_inline))
__attribute__((nonnull (1), format (printf, 1, 2)))
int printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2545, cgraph_uid=24, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_23 = NONLOCAL
ESCAPED = &STRING
ESCAPED = &n
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NULL
_22 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_21 = NONLOCAL
b_17 = a_2
b_17 = b_3
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = b_17
_24 = NONLOCAL
i_20 = i_4
i_20 = &NONLOCAL
a_2 = &NULL
a_2 = b_3
b_3 = &NONLOCAL
b_3 = b_17
i_4 = &NONLOCAL
i_4 = i_20
n.0_1 = n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 8 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"n";
"__printf_chk";
"_23";
"*__isoc99_scanf";
"_22";
"_21";
"b_17"[label="b_17 = { 1 5 }"];
"_24";
"i_20"[label="i_20 = { 5 }"];
"n.0_1";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*n";
"*__printf_chk";
"*_23";
"**__isoc99_scanf";
"*_22";
"*_21";
"*b_17";
"*_24";
"*i_20";
"*i_4";
"*n.0_1";
"*main";

  // Edges in the constraint graph:
"b_17" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_23";
"NONLOCAL" -> "_22";
"NONLOCAL" -> "_21";
"b_17" -> "b_17";
"b_17" -> "b_17";
"b_17" -> "b_17";
"NONLOCAL" -> "_24";
"i_20" -> "i_20";
"i_20" -> "i_20";
"n" -> "n.0_1";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__printf_chk";
"_23";
"*__isoc99_scanf";
"b_17";
"i_20";
"n.0_1";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_1";
"b_17" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _23\l"];
"STOREDANYTHING";
"INTEGER";
"__printf_chk";
"_23";
"*__isoc99_scanf";
"b_17";
"i_20";
"n.0_1";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_1";
"_23" -> "ESCAPED";
"_23" -> "n.0_1";
"b_17" -> "ESCAPED";
"n.0_1" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL n }
NONLOCAL = { ESCAPED NONLOCAL } same as _23
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { ESCAPED NONLOCAL } same as n.0_1
__printf_chk = { }
_23 = { ESCAPED NONLOCAL }
*__isoc99_scanf = { }
_22 = { ESCAPED NONLOCAL } same as _23
_21 = { ESCAPED NONLOCAL } same as _23
b_17 = { NULL NONLOCAL }
a_2 = { NULL NONLOCAL } same as b_17
b_3 = { NULL NONLOCAL } same as b_17
_24 = { ESCAPED NONLOCAL } same as _23
i_20 = { NONLOCAL }
i_4 = { NONLOCAL } same as i_20
n.0_1 = { ESCAPED NONLOCAL }
main = { }


Alias information for main

Aliased symbols

n, UID D.2551, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.2551 } (escaped)

Flow-insensitive points-to information


int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int n.0_1;
  int _21;
  int _22;
  int _23;
  int _24;

  <bb 2> :
  _23 = __printf_chk (1, "\xe8\xaf\xb7\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x9a");
  scanf ("%d", &n);
  _22 = __printf_chk (1, "%d\n", 0);
  _21 = __printf_chk (1, "%d\n", 1);
  goto <bb 4>; [100.00%]

  <bb 3> :
  b_17 = a_2 + b_3;
  _24 = __printf_chk (1, "%d\n", b_17);
  i_20 = i_4 + 1;

  <bb 4> :
  # a_2 = PHI <0(2), b_3(3)>
  # b_3 = PHI <1(2), b_17(3)>
  # i_4 = PHI <1(2), i_20(3)>
  n.0_1 = n;
  if (n.0_1 > i_4)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  n ={v} {CLOBBER};
  return 0;

}


