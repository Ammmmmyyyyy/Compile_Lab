
;; Function printf (printf, funcdef_no=15, decl_uid=964, cgraph_uid=16, symbol_order=15)


Analyzing function body size: printf/15

IPA function summary for printf/15 always_inline inlinable
  global time:     15.000000
  self size:       7
  global size:     0
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    __printf_chk/25 function body not available
      freq:1.00 loop depth: 0 size: 4 time: 13
       op0 is compile time invariant

__attribute__((artificial, gnu_inline, always_inline))
__attribute__((nonnull (1), format (printf, 1, 2)))
int printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2545, cgraph_uid=24, symbol_order=23)


Analyzing function body size: main/23

IPA function summary for main/23 inlinable
  global time:     66.000000
  self size:       22
  global size:     0
  min size:       0
  self stack:      4
  global stack:    4
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    printf/15 function not considered for inlining
      freq:1.00 loop depth: 1 size: 3 time: 12 callee size: 3 stack: 0
       op0 is compile time invariant
    printf/15 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 3 stack: 0
       op0 is compile time invariant
    printf/15 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 3 stack: 0
       op0 is compile time invariant
    scanf/24 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant
       op1 points to local or readonly memory
    printf/15 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size: 3 stack: 0
       op0 is compile time invariant

int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int n.0_1;
  int _14;

  <bb 2> :
  a_6 = 0;
  b_7 = 1;
  i_8 = 1;
  printf ("\xe8\xaf\xb7\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x9a");
  scanf ("%d", &n);
  printf ("%d\n", a_6);
  printf ("%d\n", b_7);
  goto <bb 4>; [INV]

  <bb 3> :
  t_16 = b_3;
  b_17 = a_2 + b_3;
  printf ("%d\n", b_17);
  a_19 = t_16;
  i_20 = i_4 + 1;

  <bb 4> :
  # a_2 = PHI <a_6(2), a_19(3)>
  # b_3 = PHI <b_7(2), b_17(3)>
  # i_4 = PHI <i_8(2), i_20(3)>
  n.0_1 = n;
  if (i_4 < n.0_1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _14 = 0;
  n ={v} {CLOBBER};
  return _14;

}


